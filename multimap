#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<algorithm>
#include<map>//使用multimap和map需要此头文件
using namespace std;

struct StudentInfo {
	int id;
	char name[20];
};
struct Student {
	int score;
	StudentInfo info;
};
typedef multimap<int, StudentInfo>MAP_STD;
//此后MAP_STD等价于multimap<int,StudentInfo>
//typedef int* PINT
//则此后 PINT等价于int*.即 PINT p;等价于int *p;

int main() {
	MAP_STD mp;
	Student st;
	char cmd[20];
	while (cin >> cmd) {
		if (cmd[0] == 'A') {//添加学生信息
			cin >> st.info.name >> st.info.id >> st.score;
			mp.insert(make_pair(st.score, st.info));//make_pair生成一个pair<int,StudentInfo>变量
		}											//其first等于st.score,second等于st.info
		else if (cmd[0] == 'Q') {//查询学生信息
			int score;
			cin >> score;
			MAP_STD::iterator p = mp.lower_bound(score);
			if (p != mp.begin()) {
				--p;
				score = p->first;//必要查询分数低的最高分
				MAP_STD::iterator maxp = p;
				int maxId = p->second.id;
				for (; p != mp.begin() && p->first == score; --p) {//遍历所有成绩和score相等的学生
					if (p->second.id > maxId) {
						maxp = p;
						maxId = p->second.id;
					}
				}
				if (p->first == score) {//如果上面循环是因为p==mp.begin()而终止，则p指向的元素还要处理
					if (p->second.id > maxId) {
						maxp = p;
						maxId = p->second.id;
					}
				}
				cout << maxp->second.name << " "
					<< maxp->second.id << " "
					<< maxp->first << endl;
			}//lower_bound的结果就是begin，说明没人分数比查询分数低
			else cout << "Nobody" << endl;
		}
	}
	return 0;
}
